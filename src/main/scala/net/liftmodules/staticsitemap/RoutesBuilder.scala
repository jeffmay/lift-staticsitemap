package net.liftmodules.staticsitemap

import net.liftweb.sitemap.{ConvertableToMenu, Loc}

trait RoutesBuilder extends PathUtils { parent =>

  // Some implicits for converting routeables and menuables
  implicit def convertToRoute[T](able: ConvertibleToRoute[T]): Route[_ <: T] = able.toRoute
  implicit def convertToMenu(able: ConvertableToMenu) = able.toMenu

  // Implicits for Url to TemplatePath mappings
  implicit def tupleStrToTupleListPathPart(mapping: (String, String)) =
    (mapping._1: List[PathPart], mapping._2)
  implicit def tupleListStrToTupleListPathPart(mapping: (List[String], String)) =
    (mapping._1: List[PathPart], mapping._2)

  /**
   * Prefix all sub routes with this list of path parts.
   */
  def prefix: List[PathPart] = Nil

  /**
   * Prefix all sub routes with this sequence of loc params.
   */
  def params: Seq[Loc.AnyLocParam] = Nil
  private[this] var _routes: List[Route[_]] = Nil

  /**
   * Retrieve the current, immutable sequence of routes.
   * @return The routes of this container
   */
  def routes: Seq[Route[_]] = _routes

  // Use this to add routes to parent on construction
  /**
   * Add the route to this container's routes
   * @param route The route to add.
   */
  def addToRoutes(route: Route[_]) {
    _routes ::= route
  }

  /**
   * A route building helper that builds parameterless routes based on the given parameter types.
   *
   * The class / defines a container of routes generated by this object, so switching from a url
   * endpoint into a container of url endpoints is easy.
   *
   * <code>
   *   val Outer = / ("outer", param1, param2)
   * </code>
   *
   * becomes:
   *
   * <code>
   *   val Outer = new / ("outer", param1, param2) {
   *     val Inner = / ("inner")
   *     ...
   *   }
   * </code>
   */
  object / extends PathUtils {

    /**
     * Append multiple path parts to the end of the current prefix, separated by slashes.
     * @param parts The next parts of the url path
     * @param params Any loc params you want to append
     * @return a parameterless route to the template with the same filename as the path plus the ".html" suffix
     */
    def apply(parts: List[PathPart], params: Loc.AnyLocParam*) = {
      val urlParts = prefix ::: parts
      new ParameterlessSubRoute(urlParts, mkFullPath(urlParts), (parent.params ++ params).toList)
    }

    /**
     * Append a list of parts to the end of the current prefix, separated by a slash.
     * @param mapping A mapping from the url, as constructed so far plus the given list of path parts,
     *                into (->) the path to the template
     * @param params Any loc params you want to append
     * @return a parameterless route to the template with the same filename as the path given in the mapping
     *         plus the ".html" suffix
     */
    def apply(mapping: (List[PathPart], String), params: Loc.AnyLocParam*) = {
      val urlParts = prefix ::: mapping._1
      new ParameterlessSubRoute(urlParts, mapping._2, (parent.params ++ params).toList)
    }

    /**
     * Create a new routes container with an external RoutesBuilder or StaticSiteMap.
     * @param routes The RoutesBuilder or StaticSiteMap that you want to add to the site map
     * @param params Any loc params that you want to prefix to the contained Routes
     * @return A new / routes builder, added to the containing sitemap, with all the routes from the external routes builder.
     */
    def apply(routes: RoutesBuilder, params: Loc.AnyLocParam*) =
      new / (routes, (parent.params ++ params): _*) {}
  }

  /**
   * A routes container that allows you to prefix url parts
   * @param prefix
   * @param params
   */
  abstract class / private[this] (override val prefix: List[PathPart], override val params: List[Loc.AnyLocParam]) extends Routes {
    def this(routes: RoutesBuilder, params: Loc.AnyLocParam*) = {
      this(parent.prefix ++ routes.prefix, (params ++ routes.params).toList)
      routes.routes foreach { addToRoutes(_) }
    }
    def this(prefix: List[PathPart], params: Loc.AnyLocParam*) = this(parent.prefix ::: prefix, params.toList)
    def this(params: Loc.AnyLocParam*) = this(parent.prefix, params.toList)
  }

  /**
   * A container for routes.
   */
  trait Routes extends RoutesBuilder {
    /**
     * Overrides the default route adding behavior by prepending all the loc params of this container
     * and adding the given route to the parent container as well.
     * @param route The route to add to the site map.
     */
    override def addToRoutes(route: Route[_]) {
      val converted = (for (param <- params) yield param >-: route).lastOption getOrElse route
      // Keep a local copy in case this container is added to another RoutesBuilder.
      parent.addToRoutes(converted)
      super.addToRoutes(converted)
    }
  }


  /* Sub routes */


  /**
   * A common trait that all sub route urls inherit from for type matching.
   */
  trait SubRouteUrl

  /**
   * A common trait that all paremeterless sub route urls inherit from for type matching.
   */
  trait ParameterlessUrl extends SubRouteUrl {
    def url: String
  }

  /**
   * A RouteBuilder that maps a template to a url.
   * @param pathParts
   * @param templatePath
   */
  class ParameterlessSubRoute private[staticsitemap] (
    pathParts: List[PathPart],
    templatePath: String,
    params: List[Loc.LocParam[Unit]]
  ) extends ParameterlessRouteConverter(mkFullPath(pathParts), templatePath, params)
    with ParameterlessUrl
  {
    def this(templatePath: String, params: Loc.LocParam[Unit]*) = this(splitPath(templatePath), templatePath, params.toList)
    def this(mapping: (List[PathPart], String), params: Loc.LocParam[Unit]*) = this(mapping._1, mapping._2, params.toList)

    // Default to the url for the prefix of url matching
    val prefix = url

    override val linkText = Loc.LinkText.strToLinkText(url)

    // Add routes to parent after all construction has completed
    parent.addToRoutes(this)
  }

  /**
   * An abstract RouteBuilder that adds the defined route to the sitemap.
   * @param templatePath The path to the template for this mapping
   * @tparam ParamsType
   */
  abstract class SubRoute[ParamsType : Manifest] private[staticsitemap] (
    override val pathParts: List[PathPart],
    templatePath: String,
    params: List[Loc.LocParam[ParamsType]]
  ) extends ParamsRouteConverter[ParamsType](templatePath, params)
    with PathBuilder
    with SubRouteUrl
    with ConvertibleToRoute[ParamsType]
  {
    // Since we don't know the url, we'll assume that the template path is the prefix
    // for url matching. Override this to get the / operator to match on a custom prefix.
    def this(templatePath: String, params: Loc.LocParam[ParamsType]*) = this(templatePath: List[PathPart], templatePath, params.toList)
    def this(mapping: (List[PathPart], String), params: Loc.LocParam[ParamsType]*) = this(mapping._1, mapping._2, params.toList)

    // Append * to name to prevent name collisions with other routes at the same level
    override val name: String = mkFullPath(pathParts ++ List(PathPart("**")))

    // Override the path root for convertible to route and path builder
    val pathRoot: String = mkFullPath(pathParts)

    // Override the path matcher
    protected val parts = pathParts: List[String]

    // Add routes to parent after all construction has completed
    parent.addToRoutes(this)
  }

  /*
    These are aliases to build common parameterized route types with prefix of its routes container.

    If you would like to place this inside of a prefixed routes container with a different prefix,
    then you must override the pathRoot val.

    If you don't want to add this to the sitemap at boot, then you must inherit from ParamsRouteConverter
   */
  protected abstract class StringParamUrl private[staticsitemap] (
    pathRoot: List[PathPart], templatePath: String, params: Seq[Loc.LocParam[String]]
  ) extends ParamUrl[String](pathRoot, templatePath, params.toList) {
    def this(mapping: (List[PathPart], String), params: Loc.LocParam[String]*) = this(parent.prefix ::: mapping._1, mapping._2, params)
    def this(prefix: List[PathPart], params: Loc.LocParam[String]*) = this(parent.prefix ++ prefix, mkFullPath(parent.prefix ++ prefix), params)
    def this(params: Loc.LocParam[String]*) = this(Nil, params: _*)
  }
  protected abstract class ParamUrl[T : Manifest] private[staticsitemap] (
    pathRoot: List[PathPart], templatePath: String, params: Seq[Loc.LocParam[T]]
  ) extends SubRoute[T](pathRoot, templatePath, params.toList) with ConvertibleToRoute1[T] {
    def this(mapping: (List[PathPart], String), params: Loc.LocParam[T]*) = this(parent.prefix ::: mapping._1, mapping._2, params)
    def this(prefix: List[PathPart], params: Loc.LocParam[T]*) = this(parent.prefix ++ prefix, mkFullPath(parent.prefix ++ prefix), params)
    def this(params: Loc.LocParam[T]*) = this(Nil, params: _*)
  }
  protected abstract class TwoParamUrl[T1 : Manifest, T2 : Manifest] private[staticsitemap] (
    pathRoot: List[PathPart], templatePath: String, params: Seq[Loc.LocParam[(T1, T2)]]
  ) extends SubRoute[(T1, T2)](pathRoot, templatePath, params.toList) with ConvertibleToRoute2[T1, T2] {
    def this(mapping: (List[PathPart], String), params: Loc.LocParam[(T1, T2)]*) = this(parent.prefix ::: mapping._1, mapping._2, params)
    def this(prefix: List[PathPart], params: Loc.LocParam[(T1, T2)]*) = this(parent.prefix ++ prefix, mkFullPath(parent.prefix ++ prefix), params)
    def this(params: Loc.LocParam[(T1, T2)]*) = this(Nil, params: _*)
  }
  protected abstract class ThreeParamUrl[T1 : Manifest, T2 : Manifest, T3 : Manifest] private[staticsitemap] (
    pathRoot: List[PathPart], templatePath: String, params: Seq[Loc.LocParam[(T1, T2, T3)]]
  ) extends SubRoute[(T1, T2, T3)](pathRoot, templatePath, params.toList) with ConvertibleToRoute3[T1, T2, T3] {
    def this(mapping: (List[PathPart], String), params: Loc.LocParam[(T1, T2, T3)]*) = this(parent.prefix ::: mapping._1, mapping._2, params)
    def this(prefix: List[PathPart], params: Loc.LocParam[(T1, T2, T3)]*) = this(parent.prefix ++ prefix, mkFullPath(parent.prefix ++ prefix), params)
    def this(params: Loc.LocParam[(T1, T2, T3)]*) = this(Nil, params: _*)
  }

}